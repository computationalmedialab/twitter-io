import nltk
from nltk.corpus import twitter_samples
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import csv 
from statistics import mean
from statistics import stdev
import re                                
import string                             
from nltk.corpus import stopwords          
from nltk.stem import PorterStemmer       
from nltk.tokenize import TweetTokenizer   

#Downloading twitter samples from twitter NLTK corpus
nltk.download('twitter_samples')

#Declaring set of positive and negative tweets
all_positive_tweets = twitter_samples.strings('positive_tweets.json')
all_negative_tweets = twitter_samples.strings('negative_tweets.json')


#Pre-processing functions
def remove_hyperlinks_marks_styles(tweet):
    
    # remove old style retweet text "RT"
    new_tweet = re.sub(r'^RT[\s]+', '', tweet)

    # remove hyperlinks
    new_tweet = re.sub(r'https?:\/\/.*[\r\n]*', '', new_tweet)

    # remove hashtags
    # only removing the hash # sign from the word
    new_tweet = re.sub(r'#', '', new_tweet)
    
    return new_tweet

tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True,
                               reduce_len=True)

def tokenize_tweet(tweet):
    
    tweet_tokens = tokenizer.tokenize(tweet)
    
    return tweet_tokens

nltk.download('stopwords')

stopwords_english = stopwords.words('english')

punctuations = string.punctuation

def remove_stopwords_punctuations(tweet_tokens):
    
    tweets_clean = []
    
    for word in tweet_tokens:
        if (word not in stopwords_english and word not in punctuations):
            tweets_clean.append(word)
            
    return tweets_clean

stemmer = PorterStemmer()

def get_stem(tweets_clean):
    
    tweets_stem = []
    
    for word in tweets_clean:
        stem_word = stemmer.stem(word)
        tweets_stem.append(stem_word)
        
    return tweets_stem

#Processing Function that includes pre-processing functions
def process_tweet(tweet):
    
    processed_tweet = remove_hyperlinks_marks_styles(tweet)
    tweet_tokens = tokenize_tweet(processed_tweet)
    tweets_clean = remove_stopwords_punctuations(tweet_tokens)
    tweets_stem = get_stem(tweets_clean)
    
    return tweets_stem

#Declaring training/testing sets for positive and negative tweets
test_pos = all_positive_tweets[4000:]
train_pos = all_positive_tweets[:4000]
test_neg = all_negative_tweets[4000:]
train_neg = all_negative_tweets[:4000]

train_x = train_pos + train_neg
test_x = test_pos + test_neg

train_y = np.append(np.ones(len(train_pos)), np.zeros(len(train_neg)))
test_y = np.append(np.ones(len(test_pos)), np.zeros(len(test_neg)))

def create_frequency(tweets, ys):
    
    freq_d = {}

    #Creating frequency dictionary
    for tweet, y in zip(tweets, ys):
        for word in process_tweet(tweet):
            pair = (word, y)
            
            if pair in freq_d:
                freq_d[pair] += 1
            
            else:
                freq_d[pair] = freq_d.get(pair, 1)
    
    return freq_d

#Building frequency dictionary
freqs = create_frequency(train_x, train_y)

#Naive Bayes Training Algorithm implementation
def train_naive_bayes(freqs, train_x, train_y):
    
    loglikelihood = {}
    logprior = 0
    
    unique_words = set([pair[0] for pair in freqs.keys()])
    V = len(unique_words)

    N_pos = N_neg = 0
    for pair in freqs.keys():
        
        if pair[1] > 0:
            N_pos += freqs[(pair)]
        else:
            N_neg += freqs[(pair)]
            
    D = train_y.shape[0]
    
    D_pos = sum(train_y)
    
    D_neg = D - sum(train_y)
    
    logprior = np.log(D_pos) - np.log(D_neg)
    
    for word in unique_words:
        
        freq_pos = freqs.get((word, 1), 0)
        freq_neg = freqs.get((word, 0), 0)
        
        p_w_pos = (freq_pos + 1) / (N_pos + V)
        p_w_neg = (freq_neg + 1) / (N_neg + V)
        
        loglikelihood[word] = np.log(p_w_pos / p_w_neg)
        
    return logprior, loglikelihood

logprior, loglikelihood = train_naive_bayes(freqs, train_x, train_y)

#Naive Bayes Prediction Implementation
def naive_bayes_predict(tweet, logprior, loglikelihood):

    word_l = process_tweet(tweet)

    p = 0

    p += logprior

    for word in word_l:
        if word in loglikelihood:
            p+=loglikelihood[word]

    return p

#Opening IRA dataset
f = open('russia_ira_feb_2021.csv')
file = csv.DictReader(f)

#Reading csv file
tweets = []
for col in file:    
    if (col['tweet_language'] == 'en') and (col['is_retweet'] == 'false'):
        tweets.append(col['tweet_text'])
        

#Predicting Sentiment for each tweet
predictions = []
for tweet in tweets:
    p = naive_bayes_predict(tweet, logprior, loglikelihood)
    predictions.append(p)

#Visiualizing Predictions
plt.hist(predictions, bins=100)
plt.gca().set(title='Distribution of Tweet Sentiment', xlabel = 'Sentiment', ylabel='Frequency');
print ("Mean: ", mean(predictions))
print ("STDEV: ", stdev(predictions))

pos_count, neg_count = 0, 0
  
for num in predictions:
      
    if num >= 0:
        pos_count += 1
  
    else:
        neg_count += 1

print("# of Positive Tweets: ", pos_count)
print("# of Negative Tweets: ", neg_count)
        
fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
langs = ['Positive', 'Negative']
students = [pos_count, neg_count]
ax.bar(langs,students)
ax.set_ylabel('Number of tweets')
ax.set_title("Number of Tweets vs Sentiment")
ax.set_xlabel('Sentiment')
plt.show()
